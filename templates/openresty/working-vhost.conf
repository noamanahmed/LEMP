fastcgi_cache_path /home/testing1/cache/nginx/ levels=1:2 keys_zone=testing1:10m max_size=64m inactive=1h;


server {	
	root /home/testing1/www;
	index index.php index.html index.htm;
	server_name testing1.demos.noamanahmed.com;
	    
	error_log /home/testing1/logs/nginx/error.log;

	include /etc/nginx/performance.conf;


    # location / {  
	# 	# First attempt to serve request as file, then
	# 	# as directory, then fall back to displaying a 404.
	# 	try_files $uri $uri/ /index.php?$args;
	# }

	## PHP with FastCGI Caching
	## add_header X-Cache $upstream_cache_status;

	location ~ \.php$ {	

		#TODO : Allow AIO Support
		# aio            on;
		# Setup var defaults
		set $no_cache 0;
		# If non GET/HEAD, don't cache & mark user as uncacheable for 1 second via cookie
		if ($request_method !~ ^(GET|HEAD)$) {
			set $no_cache "1";
		}
		# Drop no cache cookie if need be
		# (for some reason, add_header fails if included in prior if-block)
		if ($no_cache = "1") {
			add_header Set-Cookie "_mcnc=1; Max-Age=2; Path=/";
			add_header X-Microcachable "0";
		}
		# Bypass cache if no-cache cookie is set
		if ($http_cookie ~* "_mcnc") {
			set $no_cache "1";
		}
		#Don't cache the following URLs
		if ($request_uri ~* "/(wp-login.php|wp-admin|login.php|backend|admin)"){
			set $no_cache 1;
		}
		#Dont't cache admin pages
		if ($http_cookie ~* "wordpress_logged_in_"){
			set $no_cache 1;
		}
		# if ($no_cache = "1") {
        #     return 405;
        # }
		# Bypass cache if flag is set
		# fastcgi_no_cache $no_cache;
		# fastcgi_cache_bypass $no_cache;
		# fastcgi_cache testing1;
		# fastcgi_cache_key $scheme$host$request_uri$request_method;
		# fastcgi_cache_valid 200 301 302 10m;
		# fastcgi_cache_use_stale updating error timeout invalid_header http_500;
		# fastcgi_pass_header Set-Cookie;
		# fastcgi_pass_header Cookie;
		# fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

		content_by_lua_block {
			if ngx.var.no_cache == 0 then				
				resp = ngx.location.capture('/lua-subrequest-fastcgi',{args = {r_uri = ngx.var.uri}})								                
				red:set(cache_key,resp)
				red:expire(cache_key,10)
				ngx.status = resp.status			
				for k,v in pairs(resp.header) do
				    ngx.header[k] = v
				end	
				ngx.header["X-Redis-Cache"] = "ByPassed"
				ngx.say(resp.body)		
				return
			end
			local redis = require "resty.redis"
			local json = require('cjson.safe')    

			local red = redis:new()

			red:set_timeouts(1000, 1000, 1000)

            local ok, err = red:connect("unix:/var/run/redis/redis-server.sock")
			if not ok then
				ngx.say("failed to connect: ", err)
				return
			end
			local cache_key = ngx.var.scheme..ngx.var.remote_addr..ngx.var.request_uri..ngx.var.request_method
			local res, err = red:get(cache_key)
			local expiry = 30
			if res == ngx.null then	
				resp = ngx.location.capture('/lua-subrequest-fastcgi',{args = {r_uri = ngx.var.uri}})								                
				--ngx.say(json.encode(resp.header));
				local json_headers = json.encode(resp.header)				
				red:set(cache_key,resp.body)
				red:set(cache_key..'headers',json.encode(resp.header))
				red:set(cache_key..'_status',resp.status)
				red:expire(cache_key,expiry)
				red:expire(cache_key..'_headers',expiry+10)
				red:expire(cache_key..'_status',expiry+10)
				ngx.status = resp.status			
				for k,v in pairs(resp.header) do
				    ngx.header[k] = v
				end	
				ngx.header["X-Redis-Cache"] = "Miss"
				ngx.say(res)
				return										
			end

			local headers = red:get(cache_key..'headers')
			local header_map = json.decode(headers)
			

			ngx.status = red:get(cache_key..'_status')			
			for k,v in pairs(header_map) do
			    ngx.header[k] = v
			end	
			ngx.header["X-Redis-Cache"] = "Hit"
			ngx.say(res)					
			return
		}	
		
	
        
	}


	location /lua-subrequest-fastcgi {
		internal;

		set_unescape_uri $r_uri $arg_r_uri;		
		try_files $r_uri $r_uri/ /index.php?$args;

      	include snippets/fastcgi-php.conf;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_pass unix:/opt/php-fpm/testing1/php-fpm.sock;
    }
	
	

	location ~ /\.ht {
		deny all;
	}

	listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/testing1.demos.noamanahmed.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/testing1.demos.noamanahmed.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
