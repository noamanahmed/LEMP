#!/bin/bash

DIR=$(dirname "${BASH_SOURCE[0]}") 
DIR=$(realpath "${DIR}") 

template_path="$(cd $DIR/../ && pwd)/templates"
source $DIR/../includes/helpers.sh

if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

args=$@

while [ $# -gt 0 ]; do
  case "$1" in
    -u|--username)
      username="$2"
      shift
      ;;
    -d|--domain)
      domain="$2"
      shift
      ;;
    --version)
      version="$2"
      shift
      ;;
    --nvm)
      nvm=yes
      ;;
    --node)
      node=yes
      ;;
    --npm)
      npm=yes
      ;;
    --nossl)
      nossl=yes
      ;;       
    --no_monitoring)
      no_monitoring=yes
      ;;        
    *)
      printf "***************************\n"
      printf "* Error: Invalid argument. $1 *\n"
      printf "***************************\n"
      exit 1
  esac  
  shift
done

if [ -z "$username" ]
then
    echo "Please provide a username using -u "
    exit
fi


if [ -z "$domain" ]
then
    echo "Please provide a domain using -d "
    exit
fi


if id "$username" &>/dev/null
then
    echo "The $username already exists!. Please run delete-site -u $username"
    exit
fi



if [ -z "$php" ]
then
  php=7.4
fi

php_versions_array=("8.1" "8.0" "7.4" "7.3" "7.2" "7.1" "7.0" "5.6" )

if [[ ! " ${php_versions_array[*]} " =~ " ${php} " ]]; then
    echo "This is not a valid PHP Version"
    exit 1;
fi

joomla_versions_array=("4" "3" "2")

if [[ ! " ${joomla_versions_array[*]} " =~ " ${version} " ]]; then
    echo "This is not a valid Joomla Version"
    exit 1;
fi


if ! systemctl is-active --quiet nginx
  then 
  echo "Nginx is not running! Aborting!"
  exit
fi


if ! systemctl is-active --quiet mysql
  then 
  echo "mysql is not running! Aborting!"
  exit
fi

# If we are not running things locally.
if [ -z "$local" ]
then
  if ! (host -t A $domain || host -t AAAA $domain)
    then
    echo "This is not a valid domain! Aborting!"
    exit
  fi
else
  # Lets add hosts entry
  echo "127.0.0.1 $domain" >> /etc/hosts
fi


email=admin@$HOSTNAME

##Create user
user_password="$(openssl rand -hex 12)"
bash create-linux-user -u $username -p $user_password

## Jail User for a php site
bash jail-user -u $username


## Adding user to groups
usermod -a -G web $username
usermod -a -G sftp $username
usermod -a -G $username nginx
service nginx reload

## Create user directories
chroot_path=/var/www
user_root=/home/$username
chroot_home=$chroot_path/$user_root
fastcgi_path=/home/$username/www

mkdir -p $chroot_home
mkdir -p $chroot_home/logs
mkdir -p $chroot_home/logs/nginx
mkdir -p $chroot_home/logs/php
mkdir -p $chroot_home/logs/mail
mkdir -p $chroot_home/cache
mkdir -p $chroot_home/cache/nginx
mkdir -p $chroot_home/www/

www_path=$chroot_home/www 

if [ -n "$laravel" ]
then
  www_path=$chroot_home/www/public
  fastcgi_path=/home/$username/www/public
fi


#mkdir -p "$user_root/cache/php"

## Fixing Permissions for nginx cache and php logs
chown -R $username:$username $chroot_home/logs/php
chown -R nginx:nginx $chroot_home/cache/nginx

## Setting up default static HTML site
mkdir -p $www_path
cp $template_path/www/php/*.php $www_path
cp $template_path/www/php/*.html $www_path

## Setup PHP
sudo cp $template_path/php/template.tpl /etc/php/$php/fpm/pool.d/$username.conf
sed -i "s/{{username}}/$username/" /etc/php/$php/fpm/pool.d/$username.conf
sed -i "s/{{user_root}}/$(echo $chroot_home | sed 's/\//\\\//g')/" /etc/php/$php/fpm/pool.d/$username.conf
systemctl restart php$php-fpm

## Creating MYSQL user and database
database_name="$(echo $username | head -c 12)"
database_user="$(echo $username | head -c 12)"
database_password="$(openssl rand -hex 8)"

mysql -e "CREATE DATABASE IF NOT EXISTS $database_name"
mysql -e "DROP USER IF EXISTS '$database_user'@'localhost';"
mysql -e "CREATE USER '$database_user'@'localhost' IDENTIFIED WITH mysql_native_password BY '$database_password'"
mysql -e "GRANT ALL PRIVILEGES ON $database_name.* To '$database_user'@'localhost'"
mysql -e "GRANT SESSION_VARIABLES_ADMIN ON *.*  TO '$database_user'@'localhost'";
mysql -e "FLUSH PRIVILEGES;"

## Creating nginx settings
nginx_vhost_file="/etc/nginx/sites-available/$username.conf"
nginx_vhost_enabled="/etc/nginx/sites-enabled/$username.conf"
cp "$template_path/nginx/php/vhost.conf" $nginx_vhost_file

sed -i "s/{{www_path}}/$(echo $www_path | sed 's/\//\\\//g')/" $nginx_vhost_file
sed -i "s/{{domain}}/$domain/" $nginx_vhost_file
sed -i "s/{{username}}/$username/g" $nginx_vhost_file
sed -i "s/{{user_root}}/$(echo $chroot_home | sed 's/\//\\\//g')/" $nginx_vhost_file
sed -i "s/{{fastcgi_path}}/$(echo $fastcgi_path | sed 's/\//\\\//g')/" $nginx_vhost_file
sed -i "s/{{php_version}}/$php_version/" $nginx_vhost_file


ln -s $nginx_vhost_file $nginx_vhost_enabled
nginx -t && systemctl reload nginx

if [ -z "$nossl" ]
then

  ## Only Generate SSL If it is not already present. Timesave when re-creating sites
  if [ ! -f "/etc/letsencrypt/live/$domain/fullchain.pem" ]
  then
    echo "Generating SSL (This may take a while)"
    ## Test SSL Generation
    if ! certbot certonly --dry-run --quiet --webroot -d $domain --non-interactive --agree-tos -m $email -w $www_path
    then 
      echo "Error in certbot SSL generating. Cleaning up and aborting"
      delete-site -u $username -y --no_message
      exit 1;
    fi
    ## Generate SSL
    certbot certonly --quiet --webroot -d $domain --non-interactive --agree-tos -m $email -w $www_path
  fi
  ## Enabling SSL in nginx settings
  sed -i "s/#SSL_DISABLED //" $nginx_vhost_file
  nginx -t && systemctl reload nginx    
fi


## Restart nginx as we added our user to nginx group and for some reason nginx reload doesn't work
#systemctl restart nginx

## Setting up backup folder
mkdir -p /backups/$username
chown -R $username:$username /backups/$username 

## Create SSH Key Pair for git
bash create-ssh-key -u $username

# Check if we need to use npm in this site
if [ -n "$nvm" ] || [ -n "$node" ] ||[ -n "$npm" ]
then  
  bash install-nvm -u $username
fi

## Setup Joomla
rm -rf $www_path/*.php
rm -rf $www_path/*.html

joomla_password="$(openssl rand -hex 8)"
joomla_password_hashed="$(echo -n "$joomla_password" | md5sum | awk '{ print $1 }' )"
db_prefix="jos_lemp_"
joomla_user_id=1;
current_date=$(date '+%F %T')


if (( $(echo "$version == 4" |bc -l) ))
then    
  wget -O $www_path/joomla.zip https://downloads.joomla.org/cms/joomla4/4-2-2/Joomla_4-2-2-Stable-Full_Package.zip?format=zip  
  unzip $www_path/joomla.zip -d $www_path/
fi


if (( $(echo "$version == 3" |bc -l) ))
then    
  wget -O $www_path/joomla.zip https://downloads.joomla.org/cms/joomla3/3-10-11/Joomla_3-10-11-Stable-Full_Package.zip?format=zip  
  unzip $www_path/joomla.zip -d $www_path/
fi



sed -i "s/\$user = ''/\$user = '${database_user}'/" $www_path/installation/configuration.php-dist
sed -i "s/\$password = ''/\$password = '${database_password}'/" $www_path/installation/configuration.php-dist
sed -i "s/\$db = ''/\$db = '${database_name}'/" $www_path/installation/configuration.php-dist
sed -i "s/\$dbprefix = 'jos_'/\$dbprefix = '${db_prefix}'/" $www_path/installation/configuration.php-dist
sed -i "s/\$host = 'localhost'/\$host = '127.0.0.1'/" $www_path/installation/configuration.php-dist
sed -i "s/\$tmp_path = '\/tmp'/\$tmp_path = '\/var\/www\/tmp'/" $www_path/installation/configuration.php-dist
sed -i "s/\$log_path = '\/var\/logs'/\$log_path = '\/var\/www\/logs'/" $www_path/installation/configuration.php-dist
sed -i "s/\$cache_handler = 'file'/\$cache_handler = ''/" $www_path/installation/configuration.php-dist
mv $www_path/installation/configuration.php-dist $www_path/configuration.php



if (( $(echo "$version == 4" |bc -l) ))
then      

  sed -i "s/#__/${db_prefix}/" $www_path/installation/sql/mysql/base.sql
  sed -i "s/#__/${db_prefix}/" $www_path/installation/sql/mysql/extensions.sql
  sed -i "s/#__/${db_prefix}/" $www_path/installation/sql/mysql/supports.sql
  cat $www_path/installation/sql/mysql/base.sql | mysql -u $database_user --password=$database_password -h 127.0.0.1 $database_name
  cat $www_path/installation/sql/mysql/extensions.sql | mysql -u $database_user --password=$database_password -h 127.0.0.1 $database_name
  cat $www_path/installation/sql/mysql/supports.sql | mysql -u $database_user --password=$database_password -h 127.0.0.1 $database_name
  
fi

if (( $(echo "$version == 3" |bc -l) ))
then      

  sed -i "s/#__/${db_prefix}/" $www_path/installation/sql/mysql/joomla.sql
  cat $www_path/installation/sql/mysql/joomla.sql | mysql -u $database_user --password=$database_password -h 127.0.0.1 $database_name    
fi


echo "INSERT INTO \`${db_prefix}users\` (\`id\`, \`name\`, \`username\`, \`email\`, \`password\`, \`block\`, \`sendEmail\`, \`registerDate\`, \`lastvisitDate\`, \`activation\`, \`params\`, \`lastResetTime\`, \`resetCount\`, \`otpKey\`, \`otep\`, \`requireReset\`) VALUES ('${joomla_user_id}', 'Me', '${username}', '${email}', '${joomla_password_hashed}', '0', '0', '${current_date}', '${current_date}', '', '', '${current_date}', '0', '', '', '0');" | mysql -u $database_user --password=$database_password -h 127.0.0.1  $database_name
echo "INSERT INTO \`${db_prefix}user_usergroup_map\` (\`user_id\`, \`group_id\`) VALUES ('${joomla_user_id}', '8');" | mysql -u $database_name --password=$database_password $database_name
joomla_user_inc=$((joomla_user_id+1))
echo "ALTER TABLE \`${db_prefix}users\` auto_increment = ${joomla_user_inc};" | mysql -u $database_user --password=$database_password $database_name
rm -rf $www_path/installation/

## Fixing permissions
bash fix-permissions -u $username

## Switch php version to the one specified 
bash toggle-php -u $username -p $php

## Setting up Logrotation
bash logrotate-site -u $username -e yes

## Disable caching
bash disable-cache -u $username

if [ -z "$no_monitoring" ]
then
  bash create-monitor -u $username -d $domain
fi


site_info_command="bash site-info $args --ssh_password $user_password --database_name $database_name --database_user_name $database_user --database_password $database_password --mysql yes "
site_info_command+=" --joomla --joomla_password $joomla_password"

 
site_info="$($site_info_command)"

$site_info_command

bash slack-notification -u $username -d $domain -m "$site_info" --success


